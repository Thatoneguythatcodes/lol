_G.scanRemotes = true

 

_G.ignoreNames = {

    Event = true;

    MessagesChanged = true;

}

 

setreadonly(getrawmetatable(game), false)

local pseudoEnv = {}

local gameMeta = getrawmetatable(game)

 

local tabChar = "      "

 

local function getSmaller(a, b, notLast)

    local aByte = a:byte() or -1

    local bByte = b:byte() or -1

    if aByte == bByte then

        if notLast and #a == 1 and #b == 1 then

            return -1

        elseif #b == 1 then

            return false

        elseif #a == 1 then

            return true

        else

            return getSmaller(a:sub(2), b:sub(2), notLast)

        end

    else

        return aByte < bByte

    end

end

 

local function parseData(obj, numTabs, isKey, overflow, noTables, forceDict)

    local objType = typeof(obj)

    local objStr = tostring(obj)

    if objType == "table" then

        if noTables then

            return objStr

        end

        local isCyclic = overflow[obj]

        overflow[obj] = true

        local out = {}

        local nextIndex = 1

        local isDict = false

        local hasTables = false

        local data = {}

 

        for key, val in next, obj do

            if not hasTables and typeof(val) == "table" then

                hasTables = true

            end

 

            if not isDict and key ~= nextIndex then

                isDict = true

            else

                nextIndex = nextIndex + 1

            end

 

            data[#data+1] = {key, val}

        end

 

        if isDict or hasTables or forceDict then

            out[#out+1] = (isCyclic and "Cyclic " or "") .. "{"

            table.sort(data, function(a, b)

                local aType = typeof(a[2])

                local bType = typeof(b[2])

                if bType == "string" and aType ~= "string" then

                    return false

                end

                local res = getSmaller(aType, bType, true)

                if res == -1 then

                    return getSmaller(tostring(a[1]), tostring(b[1]))

                else

                    return res

                end

            end)

            for i = 1, #data do

                local arr = data[i]

                local nowKey = arr[1]

                local nowVal = arr[2]

                local parseKey = parseData(nowKey, numTabs+1, true, overflow, isCyclic)

                local parseVal = parseData(nowVal, numTabs+1, false, overflow, isCyclic)

                if isDict then

                    local nowValType = typeof(nowVal)

                    local preStr = ""

                    local postStr = ""

                    if i > 1 and (nowValType == "table" or typeof(data[i-1][2]) ~= nowValType) then

                        preStr = "\n"

                    end

                    if i < #data and nowValType == "table" and typeof(data[i+1][2]) ~= "table" and typeof(data[i+1][2]) == nowValType 

